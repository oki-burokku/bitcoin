// Copyright (c) 2009-2010 Satoshi Nakamoto
// Copyright (c) 2009-2018 The Bitcoin Core developers
// Copyright (c) 2020 Oki Burokku
// Distributed under the MIT software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php.

#ifndef BITCOIN_CONSENSUS_CONSENSUS_H
#define BITCOIN_CONSENSUS_CONSENSUS_H

#include <stdlib.h>
#include <stdint.h>


static const unsigned int DEFAULT_MAX_BLOCK_WEIGHT_MULTIPLIER = 1;
/* The global weight multipler used to scale the Max Block Weight. 
** The multipler cannot be decreased below 1. */
inline unsigned int BlockWeightMultiplier(unsigned int newMultiplier = 0)
{
	static unsigned int multiplier = DEFAULT_MAX_BLOCK_WEIGHT_MULTIPLIER;
	if (newMultiplier > 0)
	{
		multiplier = newMultiplier;
	}
	return multiplier;
} 
/** The maximum allowed weight for a block generated by this miner */
inline unsigned int MaxMinedBlockWeight(void)
{
	static const unsigned int LEGACY_MAX_BLOCK_WEIGHT = 4000000;
	return BlockWeightMultiplier() * LEGACY_MAX_BLOCK_WEIGHT;
}
/** The maximum allowed weight for a block received from the network */
inline unsigned int MaxReceivedBlockWeight(void)
{
	static const unsigned int NETWORK_MAX_BLOCK_WEIGHT_MULTIPLIER = 3;
	return NETWORK_MAX_BLOCK_WEIGHT_MULTIPLIER * MaxMinedBlockWeight();
}

static const int64_t LEGACY_DIV_MAX_BLOCK_SIGOPS_COST = 50;
/** The maximum allowed number of signature check operations in a block (network rule) 
 *  by a block mined by this miner. */
inline unsigned int MaxMinedBlockSigopsCost(void)
{	 
	return MaxMinedBlockWeight() / LEGACY_DIV_MAX_BLOCK_SIGOPS_COST;
}
/** The maximum allowed number of signature check operations in a block (network rule) 
 *  by a block received from the network. */
inline unsigned int MaxReceivedBlockSigopsCost(void)
{
	return MaxReceivedBlockWeight() / LEGACY_DIV_MAX_BLOCK_SIGOPS_COST;
}
/** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */
static const int COINBASE_MATURITY = 100;

static const int WITNESS_SCALE_FACTOR = 4;

static const size_t MIN_TRANSACTION_WEIGHT = WITNESS_SCALE_FACTOR * 60; // 60 is the lower bound for the size of a valid serialized CTransaction
static const size_t MIN_SERIALIZABLE_TRANSACTION_WEIGHT = WITNESS_SCALE_FACTOR * 10; // 10 is the lower bound for the size of a serialized CTransaction

/** Flags for nSequence and nLockTime locks */
/** Interpret sequence numbers as relative lock-time constraints. */
static constexpr unsigned int LOCKTIME_VERIFY_SEQUENCE = (1 << 0);
/** Use GetMedianTimePast() instead of nTime for end point timestamp. */
static constexpr unsigned int LOCKTIME_MEDIAN_TIME_PAST = (1 << 1);

#endif // BITCOIN_CONSENSUS_CONSENSUS_H
